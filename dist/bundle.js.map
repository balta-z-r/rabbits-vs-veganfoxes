{"version":3,"sources":["webpack://talons/./node_modules/lodash/_Symbol.js","webpack://talons/./node_modules/lodash/_arrayMap.js","webpack://talons/./node_modules/lodash/_asciiToArray.js","webpack://talons/./node_modules/lodash/_baseGetTag.js","webpack://talons/./node_modules/lodash/_baseSlice.js","webpack://talons/./node_modules/lodash/_baseToString.js","webpack://talons/./node_modules/lodash/_castSlice.js","webpack://talons/./node_modules/lodash/_createCaseFirst.js","webpack://talons/./node_modules/lodash/_freeGlobal.js","webpack://talons/./node_modules/lodash/_getRawTag.js","webpack://talons/./node_modules/lodash/_hasUnicode.js","webpack://talons/./node_modules/lodash/_objectToString.js","webpack://talons/./node_modules/lodash/_root.js","webpack://talons/./node_modules/lodash/_stringToArray.js","webpack://talons/./node_modules/lodash/_unicodeToArray.js","webpack://talons/./node_modules/lodash/capitalize.js","webpack://talons/./node_modules/lodash/isArray.js","webpack://talons/./node_modules/lodash/isObjectLike.js","webpack://talons/./node_modules/lodash/isSymbol.js","webpack://talons/./node_modules/lodash/toString.js","webpack://talons/./node_modules/lodash/upperFirst.js","webpack://talons/webpack/bootstrap","webpack://talons/webpack/runtime/global","webpack://talons/./src/simulation_params.js","webpack://talons/./src/sliders.js","webpack://talons/./src/background.js","webpack://talons/./util/util.js","webpack://talons/./src/panorama.js","webpack://talons/./src/organism.js","webpack://talons/./src/predator.js","webpack://talons/./src/organisms_controller.js","webpack://talons/./src/predators_controller.js","webpack://talons/./src/prey.js","webpack://talons/./src/preys_controller.js","webpack://talons/./src/field.js","webpack://talons/./src/zoo.js","webpack://talons/./src/graph.js","webpack://talons/./src/simulation.js","webpack://talons/./src/main.js"],"names":["Symbol","module","exports","array","iteratee","index","length","result","Array","string","split","getRawTag","objectToString","symToStringTag","toStringTag","undefined","value","Object","start","end","arrayMap","isArray","isSymbol","symbolProto","prototype","symbolToString","toString","baseToString","call","baseSlice","castSlice","hasUnicode","stringToArray","methodName","strSymbols","chr","charAt","trailing","join","slice","freeGlobal","g","objectProto","hasOwnProperty","nativeObjectToString","isOwn","tag","unmasked","e","reHasUnicode","RegExp","test","freeSelf","self","root","Function","asciiToArray","unicodeToArray","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsModifier","rsOptVar","rsSeq","rsSymbol","reUnicode","match","upperFirst","toLowerCase","baseGetTag","isObjectLike","createCaseFirst","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","this","window","SimulationParams","predatorCount","rabbitCount","predatorSpeed","predatorRadius","predatorGravitationNbhd","predatorColor","rabbitColor","predatorEfficiency","predatorPerception","predatorReproductionPeriod","preyCount","preySpeed","preyRadius","preyGravitationNbhd","preyColor","preyPerception","preyCamoflage","preyReproductionPeriod","preyCarryingCapacity","fieldNetSize","count","predatorParams","speed","radius","color","efficiency","perception","reproductionPeriod","preyParams","carryingCapacity","gravitationNbhd","Math","round","document","getElementById","Background","canvas","ctx","getContext","img","Image","onload","loaded","src","imageSize","width","height","console","log","canvasSize","dx","drawImage","doesImageNeedStitching","positiveMod","n","m","distanceX","x1","x2","smaller","min","larger","max","innerDistance","outerDistance","distanceY","y1","y2","abs","distance","sqrt","pow","fieldCellCoords","x","y","floor","gravitation","dist","fitToAxis","valueMax","axisMax","Panorama","background","panoramaSize","isDampening","cursorOffsetX","setCanvasListeners","zoo","draw","drawOrganisms","preysController","foxesController","rabbitsController","controller","organisms","forEach","organism","drawOrganism","beginPath","arc","center","PI","fillStyle","strokeStyle","fill","lineWidth","stroke","dampenStaleCursorInput","bool","toggleDampening","addEventListener","mousePos","rect","getBoundingClientRect","clientX","left","clientY","top","getMousePos","updateCursorOffset","Organism","initializeCenter","initializeDirection","random","radialDirection","direction","cos","sin","dxdt","dydt","resolveBounces","maxHeight","overflow","minHeight","underflow","field","gradient","constructGradient","normalization","Predator","super","lastAte","Date","now","preys","elapsedTime","OrganismsController","lastReproduced","updateDirections","moveOrganism","updateDirection","condemnedList","condemnedIdx","indexOf","splice","PredatorsController","populatePredators","i","createPredator","predator","push","preysLocations","eaten","predatorCoords","food","feed","from","Set","starved","currentTime","killOrganisms","populateParams","updatePredatorParams","pauseTimestamp","unpause","Prey","PreysController","populatePreys","createPrey","prey","locations","preyCoords","middleIdx","updatePreyParams","Field","sgn","fieldSize","rowCount","ceil","colCount","initializeField","map","el","rowIdxs","keys","centerRowIdx","rowIdx","colIdxs","distCenterRow","colIdx","organismsController","resetField","updateField","fieldPosition","row","col","modCol","pointVector","weight","xDist","sgnX","sgnY","Zoo","predatorsParams","rabbitsParams","preysParams","predatorFieldParams","preyFieldParams","foxesField","rabbitsField","preysField","updatePredatorsParams","updatePreysParams","updateFieldParams","starve","calculateFields","moveOrganisms","reproduce","movePredators","movePrey","calculatePredatorsField","calculatePreysField","calculateField","calculatePreysLocations","revealLocations","starvePredators","starvePreys","unpauseTimestamp","reproducePredators","reproducePreys","Graph","graphCanvas","simulationParams","lastCoords","foxesCount","rabbitsCount","lastDraw","foxColor","updateDatapoints","clearRect","drawData","drawAxes","drawFoxData","drawRabbitData","xIncrement","xCoord","moveTo","coord","idx","lineTo","Simulation","graph","panorama","animationInterval","timestamp","ticker","requestAnimationFrame","tick","bind","nextRender","updateDx","begin","cancelAnimationFrame","event","simulation","hidden","togglePlaying","handleVisibilityChange"],"mappings":"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","file":"bundle.js","sourcesContent":["var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","'use strict';\n\n// SimulationParams: controls the parameters for the simulation.\n// Allows users to adjust input; manages event listeners to\n// determine this input.\nexport default class SimulationParams {\n  constructor() {\n    //set defaults\n    this.predatorCount = 20; // count at initialization or reset\n    this.rabbitCount = 30;\n    this.predatorSpeed = 15; // pixels moved per tick\n    this.predatorRadius = 20; // radius of the graphical circle\n    this.predatorGravitationNbhd = 10; // px size of neighborhood to detect prey\n    this.predatorColor = '#354b6d';\n    this.rabbitColor = '#d850d1';\n    this.predatorEfficiency = 10000; // milliseconds a predator can survive without feeding\n    this.predatorPerception = 25; // lower is better; this is a 1/x weight\n    this.predatorReproductionPeriod = 12000; // ms; should be longer than predator efficiency to avoid explosion\n    this.preyCount = 50; // count at initialization or reset\n    this.preySpeed = 0; // pixels moved per tick\n    this.preyRadius = 10; // radius of the graphical circle\n    this.preyGravitationNbhd = 20; // px size of neighborhood to detect predators\n    this.preyColor = '#efe092';\n    this.preyPerception = 7; // lower is better; this is a 1/x weight\n    this.preyCamoflage = 0.5; // weight on the 'gravitational field' for each prey; lower is less detectable\n    this.preyReproductionPeriod = 5000; // ms\n    this.preyCarryingCapacity = 500; // maximum number of prey\n    this.fieldNetSize = 10; // grid size of the gravitational field; Must be smaller than both radii/sqrt(2)!\n  }\n\n  // normalize params for Predators / PredatorsController\n  predatorsParams() {\n    return {\n      count: this.predatorCount,\n      predatorParams: {\n        speed: this.predatorSpeed,\n        radius: this.predatorRadius,\n        color: this.predatorColor,\n        efficiency: this.predatorEfficiency,\n        perception: this.predatorPerception\n      },\n      reproductionPeriod: this.predatorReproductionPeriod\n    };\n  }\n\n  rabbitsParams() {\n    return {\n      count: this.rabbitCount,\n      predatorParams: {\n        speed: this.predatorSpeed,\n        radius: this.predatorRadius,\n        color: this.rabbitColor,\n        efficiency: this.predatorEfficiency,\n        perception: this.predatorPerception\n      },\n      reproductionPeriod: this.predatorReproductionPeriod\n    };\n  }\n\n  // normalize params for Preys / PreysController\n  preysParams() {\n    return {\n      count: this.preyCount,\n      preyParams: {\n        speed: this.preySpeed,\n        radius: this.preyRadius,\n        color: this.preyColor,\n        perception: this.preyPerception\n      },\n      reproductionPeriod: this.preyReproductionPeriod,\n      carryingCapacity: this.preyCarryingCapacity\n    };\n  }\n\n  // normalize params for PredatorsField\n  predatorFieldParams() {\n    return {\n      fieldNetSize: this.fieldNetSize,\n      gravitationNbhd: this.predatorGravitationNbhd\n    };\n  }\n\n  // normalize params for PreysField\n  preyFieldParams() {\n    return {\n      fieldNetSize: this.fieldNetSize,\n      gravitationNbhd: Math.round(this.preyGravitationNbhd * this.preyCamoflage)\n    };\n  }\n}\n","'use strict';\nimport capitalize from 'lodash/capitalize';\n\n// This file manages listeners for the parameter sliders on the webpage\n// It updates the SimulationParams when a user makes changes\n\n// Select all the sliders through DOM\nconst sliderEls = {\n  predatorsSliders: {\n    count: document.getElementById(\"predator-count\"),\n    speed: document.getElementById(\"predator-speed\"),\n    perception: document.getElementById(\"predator-perception\"),\n    efficiency: document.getElementById(\"predator-efficiency\"),\n    reproduction: document.getElementById(\"predator-reproduction\")\n  },\n  preysSliders: {\n    count: document.getElementById(\"prey-count\"),\n    speed: document.getElementById(\"prey-speed\"),\n    camoflage: document.getElementById(\"prey-camoflage\"),\n    capacity: document.getElementById(\"prey-capacity\"),\n    reproduction: document.getElementById(\"prey-reproduction\")\n  },\n  controls: {\n    play: document.getElementById(\"play-button\"),\n    pause: document.getElementById(\"pause-button\"),\n    restart: document.getElementById(\"restart-button\")\n  }\n};\n\n// This class manages event listeners for controlling the simulation and\n// changing its parameters\nexport default class Sliders {\n  constructor(simulation, simulationParams) {\n    this.simulation = simulation;\n    this.simulationParams = simulationParams;\n    this.initializeEventListeners(sliderEls);\n    this.isPlaying = true;\n  }\n\n  initializeEventListeners({predatorsSliders, preysSliders, controls}) {\n    this.initializePredatorsEventListeners(predatorsSliders);\n    this.initializePreysEventListeners(preysSliders);\n    this.initializeControlsEventListeners(controls);\n  }\n\n  initializeControl(controlGroup, controlName, eventName, callback) {\n    console.log(controlGroup, controlGroup[controlName]);\n    controlGroup[controlName].addEventListener(eventName, callback);\n  }\n\n  initializePredatorsEventListeners(predatorsSliders) {\n    Object.keys(predatorsSliders).forEach(controlName => {\n      this.initializeControl(predatorsSliders, controlName, 'mouseup', e => {\n        // custom logic for transforming the user input to a parameter\n        if (controlName === \"perception\") {\n          // lower perception values are better\n          // (they are an inverse-distance weight)\n          this.simulationParams['predator' + capitalize(controlName)] =\n            25 - e.target.value;\n        } else {\n          // in most cases, the slider's value is the exact parameter value\n          this.simulationParams['predator' + capitalize(controlName)] =\n            e.target.value;\n        }\n        // propogate updated parameters to the models\n        this.updateOrganisms();\n      });\n    });\n  }\n\n  initializePreysEventListeners(preysSliders) {\n    preysSliders.count.addEventListener('mouseup', e => {\n      this.simulationParams.preyCount = e.target.value;\n    });\n    preysSliders.speed.addEventListener('mouseup', e => {\n      this.simulationParams.preySpeed = e.target.value;\n      this.updateOrganisms();\n    });\n    preysSliders.camoflage.addEventListener('mouseup', e => {\n      this.simulationParams.preyCamoflage = e.target.value / 100;\n      this.updatePreysField();\n    });\n    preysSliders.capacity.addEventListener('mouseup', e => {\n      this.simulationParams.preyCarryingCapacity = e.target.value;\n      this.updateOrganisms();\n    });\n    preysSliders.reproduction.addEventListener('mouseup', e => {\n      this.simulationParams.preyReproductionPeriod = e.target.value;\n      this.updateOrganisms();\n    });\n  }\n\n  initializeControlsEventListeners(controls) {\n    controls.play.addEventListener('click', e => {\n      this.togglePlaying('play');\n    });\n    controls.pause.addEventListener('click', e => {\n      this.togglePlaying('pause');\n    });\n    controls.restart.addEventListener('click', e => {\n      this.togglePlaying('restart');\n    });\n  }\n\n  updateOrganisms() {\n    // need to transform inputs from the linear slider values\n    // this.simulationParams.predatorPerception =\n    //   25 - this.simulationParams.predatorPerception;\n    this.simulation.updateOrganisms({\n      predatorsParams: this.simulationParams.predatorsParams(),\n      preysParams: this.simulationParams.preysParams()\n    });\n  }\n\n  updatePreysField() {\n    this.simulation.updatePreysField(this.simulationParams.preyFieldParams());\n  }\n\n  togglePlaying(type) {\n    switch (type) {\n      case 'play':\n        if (!this.isPlaying) {\n          this.isPlaying = true;\n          this.simulation.togglePlaying(true);\n        }\n        break;\n      case 'pause':\n        this.isPlaying = false;\n        this.simulation.togglePlaying(false);\n        break;\n      case 'restart':\n        this.isPlaying = true;\n        this.simulation.restart();\n        break;\n    }\n  }\n}\n","'use strict';\n\nconst backgroundPath = 'https://s3-us-west-1.amazonaws.com/talons-dev/final-background-cropped.jpeg';\n\nexport default class Background {\n  // eventually refactor into background and panorama classes\n  constructor(canvas) {\n    this.ctx = canvas.getContext('2d');\n    this.img = new Image(3000, 750);\n    this.img.onload = () => { this.loaded = true; };\n    this.img.src = backgroundPath;\n    this.loaded = false;\n    this.imageSize = {\n      width: this.img.width,\n      height: this.img.height\n    };\n    console.log(this.imageSize);\n    this.canvasSize = {\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  draw(dx) {\n    this.ctx.drawImage(this.img, -dx, 0);\n    // only perform second draw of stitched image when necessary\n    if (this.doesImageNeedStitching(dx)) {\n      this.ctx.drawImage(this.img, this.imageSize.width - dx, 0);\n    }\n  }\n\n  doesImageNeedStitching(dx) {\n    return dx > (this.imageSize.width - this.canvasSize.width);\n  }\n}\n","'use strict';\n\nexport const positiveMod = (n, m) => (\n  ((n % m) + m) % m\n);\n\n// computed the horizontal distance between two points\n// accounting for the panorama's wrapping\nexport const distanceX = (x1, x2, width) => {\n  const smaller = Math.min(x1, x2);\n  const larger = Math.max(x1, x2);\n  const innerDistance = larger - smaller;\n  const outerDistance = smaller + width - larger;\n  return Math.min(innerDistance, outerDistance);\n};\n\nexport const distanceY = (y1, y2) => {\n  return Math.abs(y2 - y1);\n};\n\nexport const distance = (x1, y1, x2, y2, width) => {\n  return Math.sqrt(Math.pow(distanceY(y1, y2), 2) +\n                   Math.pow(distanceX(x1, x2, width), 2));\n};\n\nexport const fieldCellCoords = ({x, y}, fieldNetSize) => ({\n  x: Math.floor(x / fieldNetSize),\n  y: Math.floor(y / fieldNetSize)\n});\n\nexport const gravitation = dist => {\n  if (dist === 0) {\n    // avoid singularities;\n    return 100;\n  } else {\n    return Math.pow(dist, -2);\n  }\n};\n\n// inspired by https://stackoverflow.com/questions/1114465/getting-mouse-location-in-canvas\nexport const getMousePos = (canvas, e) => {\n  const rect = canvas.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    y: e.clientY - rect.top\n  };\n};\n\nexport const fitToAxis = (value, valueMax, axisMax) => (\n  (value / valueMax) * axisMax\n);\n","'use strict';\n\nimport Background from './background';\nimport { positiveMod, getMousePos } from '../util/util';\n\n// handles all logic for the wrapping panorama and drawing all canvas items\n// in particular, tracks offset for drawing based on user scroll\nexport default class Panorama {\n  constructor(canvas) {\n    this.background = new Background(canvas);\n    this.ctx = canvas.getContext('2d');\n    this.panoramaSize = this.background.imageSize;\n    this.canvasSize = this.background.canvasSize;\n\n    this.dx = 0;\n    this.isDampening = false;\n    this.cursorOffsetX = 0;\n\n    this.setCanvasListeners(canvas);\n  }\n\n  // loadAssets() {\n  //   let loaded = false;\n  //   this.background.\n  // }\n\n  draw(zoo) {\n    if (this.background.loaded) {\n      this.background.draw(this.dx);\n      this.drawOrganisms(zoo.preysController);\n      this.drawOrganisms(zoo.foxesController);\n      this.drawOrganisms(zoo.rabbitsController);\n    }\n  }\n\n  drawOrganisms(controller) {\n    controller.organisms.forEach((organism) => {\n      this.drawOrganism(organism);\n    });\n  }\n\n  drawOrganism(organism) {\n    this.ctx.beginPath();\n    this.ctx.arc(\n      positiveMod(organism.center.x - this.dx, this.panoramaSize.width),\n      organism.center.y,\n      organism.radius,\n      0,\n      2 * Math.PI\n    );\n    this.ctx.fillStyle = organism.color;\n    this.ctx.strokeStyle = '#476189';\n    this.ctx.fill();\n    this.ctx.lineWidth = 5;\n    this.ctx.stroke();\n  }\n\n  updateDx() {\n    this.dampenStaleCursorInput();\n    this.dx += this.cursorOffsetX * 0.075;\n    this.dx = positiveMod(this.dx, this.panoramaSize.width);\n  }\n\n  toggleDampening(bool) {\n    this.isDampening = bool;\n  }\n\n  dampenStaleCursorInput() {\n    if (this.isDampening) {\n      this.cursorOffsetX = this.cursorOffsetX * 0.8;\n      if (Math.abs(this.cursorOffsetX) < 1) {\n        this.cursorOffsetX = 0;\n      }\n    }\n  }\n\n  updateCursorOffset({ x }) {\n    if (Math.abs(this.canvasSize.width / 2 - x) > this.canvasSize.width / 3) {\n      this.toggleDampening(false);\n      this.cursorOffsetX = x - this.canvasSize.width / 2;\n    } else {\n      this.toggleDampening(true);\n    }\n  }\n\n  setCanvasListeners(canvas) {\n    canvas.addEventListener('mousemove', (e) => {\n      const mousePos = getMousePos(canvas, e);\n      this.updateCursorOffset(mousePos);\n    });\n\n    canvas.addEventListener('mouseout', () => {\n      this.toggleDampening(true);\n    });\n  }\n}\n","'use strict';\n\nimport { positiveMod, fieldCellCoords, gravitation,\n         distance, distanceX, distanceY } from '../util/util';\n\nexport default class Organism {\n  constructor({speed, radius, color, perception}, panoramaSize) {\n    this.speed = speed;\n    this.radius = radius;\n    this.color = color;\n    this.perception = perception;\n    this.initializeCenter(panoramaSize);\n    this.initializeDirection();\n  }\n\n  // Choose a random spot on the display for the organism to be placed\n  initializeCenter({width, height}) {\n    this.center = {\n      x: Math.random() * width,\n      y: (Math.random() * (height - (2 * this.radius))) + this.radius\n    };\n  }\n\n  // Choose a random direction for the organism to move at its initialization\n  initializeDirection() {\n    // sample as an angle for a uniform radial distribution\n    // i.e. don't bias directions to the diagonals via a cartesian ransom sample\n    const radialDirection = Math.random() * 2 * Math.PI;\n    this.direction = {\n      x: Math.cos(radialDirection),\n      y: Math.sin(radialDirection)\n    };\n  }\n\n  // move the organism's position by one tick\n  moveOrganism({width, height}) {\n    this.center = {\n      x: positiveMod(this.center.x + this.dxdt(), width),\n      y: this.center.y + this.dydt()\n    };\n    this.resolveBounces(height);\n  }\n\n  // y-velocity\n  dydt() {\n    return this.speed * this.direction.y;\n  }\n\n  // x-velocity\n  dxdt() {\n    return this.speed * this.direction.x;\n  }\n\n  // minimum y-position the organism can fit on the display\n  minHeight() {\n    return this.radius;\n  }\n\n  // maximum y-position the organism can fit on the display\n  maxHeight(height) {\n    return height - this.radius;\n  }\n\n  // prevent rendering outside of the display and\n  // flip y-velocity to \"bounce\" off of the display's edge\n  resolveBounces(height) {\n    if (this.center.y > this.maxHeight(height)) {\n      const overflow = this.center.y - this.maxHeight(height);\n      this.center.y -= overflow;\n      this.direction.y = -1 * this.direction.y;\n    } else if (this.center.y < this.minHeight()) {\n      const underflow = this.minHeight() - this.center.y;\n      this.center.y += underflow;\n      this.direction.y = -1 * this.direction.y;\n    }\n  }\n\n  // change the direction the organism is moving based on\n  // the predator/prey interactions.\n  updateDirection(field) {\n    const gradient = field.constructGradient(this);\n    const totalSpeed = Math.sqrt( Math.pow(this.direction.x + (gradient.x / this.perception), 2) +\n                                  Math.pow(this.direction.y + (gradient.y / this.perception), 2) );\n    const normalization = 1 / totalSpeed;\n    this.direction.x = (this.direction.x + (gradient.x / this.perception)) * normalization;\n    this.direction.y = (this.direction.y + (gradient.y / this.perception)) * normalization;\n  }\n}\n","'use strict';\n\nimport Organism from './organism';\n\nexport default class Predator extends Organism {\n  constructor(predatorParams, panoramaSize) {\n    super(predatorParams, panoramaSize);\n    this.lastAte = Date.now();\n    this.efficiency = predatorParams.efficiency;\n  }\n\n  // allow for parameters to be changed after the initialization\n  // (e.g. based on user input on the slider)\n  updatePredatorParams({speed, efficiency, perception}) {\n    this.speed = speed;\n    this.efficiency = efficiency;\n    this.perception = perception;\n  }\n\n  // resets the countdown to starvation\n  feed(preys) {\n    this.lastAte = Date.now();\n  }\n\n  // add paused time to the lastAte timestamp before resuming\n  // simulation calculations\n  unpause(elapsedTime) {\n    this.lastAte += elapsedTime;\n  }\n}\n","'use strict';\nimport capitalize from 'lodash/capitalize';\nimport { distance, distanceY, positiveMod,\n         gravitation } from '../util/util';\n\nexport default class OrganismsController {\n  constructor(reproductionPeriod) {\n    this.organisms = [];\n    this.lastReproduced = Date.now();\n    this.reproductionPeriod = reproductionPeriod;\n  }\n\n  moveOrganisms(panoramaSize, field) {\n    this.updateDirections(field);\n    this.organisms.forEach( organism => {\n      organism.moveOrganism(panoramaSize);\n    });\n  }\n\n  updateDirections(field) {\n    this.organisms.forEach( organism => {\n      organism.updateDirection(field);\n    });\n  }\n\n  killOrganisms(condemnedList) {\n    condemnedList.forEach( organism => {\n      const condemnedIdx = this.organisms.indexOf(organism);\n      this.organisms.splice(condemnedIdx, 1);\n    });\n  }\n}\n","'use strict';\n\nimport Predator from './predator';\nimport OrganismsController from './organisms_controller';\nimport { fieldCellCoords } from '../util/util';\n\nexport default class PredatorsController extends OrganismsController {\n  constructor({predatorParams, count, reproductionPeriod}, panoramaSize) {\n    super(reproductionPeriod);\n    this.predatorParams = predatorParams;\n    this.populatePredators({predatorParams, count}, panoramaSize);\n  }\n\n  populatePredators({count, predatorParams}, panoramaSize) {\n    for (let i = 0; i < count; i++) {\n      this.createPredator(predatorParams, panoramaSize);\n    }\n  }\n\n  createPredator(predatorParams, panoramaSize) {\n    const predator = new Predator(predatorParams, panoramaSize);\n    this.organisms.push(predator);\n  }\n\n  feed(preysLocations, fieldNetSize) {\n    const eaten = [];\n    this.organisms.forEach( predator => {\n      const predatorCoords = fieldCellCoords(predator.center, fieldNetSize);\n      const food = preysLocations[predatorCoords.x] ?\n        preysLocations[predatorCoords.x][predatorCoords.y] : null;\n      if (food) {\n        eaten.push(food);\n        predator.feed();\n      }\n    });\n    return Array.from(new Set(eaten));\n  }\n\n  starvePredators() {\n    const starved = [];\n    const currentTime = Date.now();\n    this.organisms.forEach( predator => {\n      if (currentTime - predator.lastAte > predator.efficiency) {\n        starved.push(predator);\n      }\n    });\n    this.killOrganisms(starved);\n  }\n\n  reproducePredators(panoramaSize) {\n    if (Date.now() - this.lastReproduced > this.reproductionPeriod) {\n      const populateParams = {\n        count: this.organisms.length,\n        predatorParams: this.predatorParams\n      };\n      this.populatePredators(populateParams, panoramaSize);\n      this.lastReproduced = Date.now();\n    }\n  }\n\n  updatePredatorsParams({predatorParams, reproductionPeriod}) {\n    this.predatorParams = predatorParams;\n    this.reproductionPeriod = reproductionPeriod;\n    this.organisms.forEach( predator => {\n      predator.updatePredatorParams(predatorParams);\n    });\n  }\n\n  unpause(pauseTimestamp) {\n    const elapsedTime = Date.now() - pauseTimestamp;\n    this.organisms.forEach(organism => organism.unpause(elapsedTime));\n  }\n}\n","'use strict';\n\nimport Organism from './organism';\n\nexport default class Prey extends Organism {\n  constructor(preyParams, panoramaSize) {\n    super(preyParams, panoramaSize);\n  }\n\n  // allow for parameters to be changed after the initialization\n  // (e.g. based on user input on the slider)\n  updatePreyParams({speed}) {\n    this.speed = speed;\n  }\n}\n","'use strict';\n\nimport Prey from './prey';\nimport OrganismsController from './organisms_controller';\nimport { fieldCellCoords } from '../util/util';\n\nexport default class PreysController extends OrganismsController {\n  constructor({preyParams, count, reproductionPeriod, carryingCapacity},\n              panoramaSize) {\n    super(reproductionPeriod);\n    this.preyParams = preyParams;\n    this.carryingCapacity = carryingCapacity;\n    this.populatePreys({count, preyParams}, panoramaSize);\n  }\n\n  populatePreys({count, preyParams}, panoramaSize) {\n    for (let i = 0; i < count; i++) {\n      this.createPrey(preyParams, panoramaSize);\n    }\n  }\n\n  createPrey(preyParams, panoramaSize) {\n    const prey = new Prey(preyParams, panoramaSize);\n    this.organisms.push(prey);\n  }\n\n  revealLocations(fieldNetSize) {\n    const locations = {};\n    this.organisms.forEach( prey => {\n      const preyCoords = fieldCellCoords(prey.center, fieldNetSize);\n      locations[preyCoords.x] = locations[preyCoords.x] || [];\n      locations[preyCoords.x][preyCoords.y] = prey;\n    });\n    return locations;\n  }\n\n  reproducePreys(panoramaSize) {\n    if (Date.now() - this.lastReproduced > this.reproductionPeriod) {\n      const populateParams = {\n        count: this.organisms.length,\n        preyParams: this.preyParams\n      };\n      this.populatePreys(populateParams, panoramaSize);\n      this.lastReproduced = Date.now();\n    }\n  }\n\n  starvePreys() {\n    if (this.organisms.length > this.carryingCapacity) {\n      const middleIdx = Math.floor(this.organisms.length / 2);\n      this.organisms = this.organisms.slice(middleIdx);\n    }\n  }\n\n  updatePreysParams({preyParams, reproductionPeriod, carryingCapacity}) {\n    this.preyParams = preyParams;\n    this.reproductionPeriod = reproductionPeriod;\n    this.carryingCapacity = carryingCapacity;\n    this.organisms.forEach( prey => {\n      prey.updatePreyParams(preyParams);\n    });\n  }\n}\n","'use strict';\n\nimport { distanceY, distanceX, distance,\n         fieldCellCoords, positiveMod, gravitation } from '../util/util';\n\nexport default class Field {\n  constructor({fieldNetSize, gravitationNbhd}, {height, width}, sgn) {\n    this.fieldSize = {\n      rowCount: Math.ceil(height / fieldNetSize),\n      colCount: Math.ceil(width / fieldNetSize)\n    };\n    this.fieldNetSize = fieldNetSize;\n    this.gravitationNbhd = gravitationNbhd;\n    this.sgn = sgn;\n    this.initializeField(this.fieldSize);\n  }\n\n  initializeField({rowCount, colCount}) {\n    this.field = Array(rowCount).fill(0).map(el => (\n      Array(colCount).fill(0)\n    ));\n  }\n\n  resetField() {\n    const rowIdxs = Object.keys(this.field);\n    const centerRowIdx = rowIdxs[Math.floor(rowIdxs.length/2)];\n    rowIdxs.forEach( rowIdx => {\n      const colIdxs = Object.keys(this.field[rowIdx]);\n      const distCenterRow = distanceY(centerRowIdx, rowIdx);\n      colIdxs.forEach( colIdx => {\n        // prevent clustering on edges\n        this.field[rowIdx][colIdx] = (distCenterRow / centerRowIdx) / 1000;\n      });\n    });\n  }\n\n  calculateField(organismsController) {\n    this.resetField();\n    organismsController.organisms.forEach( organism => {\n      this.updateField(organism);\n    });\n  }\n\n  updateField(organism) {\n    let x, y;\n    ({x, y} = this.fieldPosition(organism));\n    for (let row = y - this.gravitationNbhd; row < y + this.gravitationNbhd; row++) {\n      for (let col = x - this.gravitationNbhd; col < x + this.gravitationNbhd; col++) {\n        // JS will get mad if you try to change the iterator mid loop.\n        let modCol = col;\n        if (row < 0 || row >= this.fieldSize.rowCount) continue;\n        if (modCol < 0 || modCol >= this.fieldSize.colCount) {\n          modCol = positiveMod(modCol, Math.floor(this.fieldSize.colCount));\n        }\n        const pointVector = this.sgn * gravitation(distance(x, y, modCol, row, this.fieldSize.colCount));\n        this.field[row][modCol] += pointVector;\n      }\n    }\n  }\n\n  fieldPosition(organism) {\n    return fieldCellCoords(organism.center, this.fieldNetSize);\n  }\n\n  // use the field of other organisms to construct a gradient for an organism\n  constructGradient(organism) {\n    let x, y;\n    ({x, y} = this.fieldPosition(organism));\n    const gradient = {\n      x: 0,\n      y: 0\n    };\n    for (let row = y - this.gravitationNbhd; row < y + this.gravitationNbhd; row++) {\n      for (let col = x - this.gravitationNbhd; col < x + this.gravitationNbhd; col++) {\n        let modCol = col;\n        if (row < 0 || row >= this.fieldSize.rowCount) continue;\n        if (col === x || row === y) continue;\n        modCol = positiveMod(modCol, this.fieldSize.colCount);\n        const dist = distance(col, row, x, y, this.fieldSize.colCount);\n        const weight = gravitation(dist);\n        const xDist = distanceX(x, modCol, this.fieldSize.rowCount);\n        const yDist = distanceY(y, row);\n        const sin = yDist / dist;\n        const cos = xDist / dist;\n        const sgnX = (col > x) ? 1 : -1 ;\n        const sgnY = (row > y) ? 1 : -1 ;\n        gradient.x += this.field[row][modCol] * cos * weight * sgnX;\n        gradient.y += this.field[row][modCol] * sin * weight * sgnY;\n      }\n    }\n    return gradient;\n  }\n\n  updateFieldParams({fieldNetSize, gravitationNbhd}) {\n    this.fieldNetSize = fieldNetSize;\n    this.gravitationNbhd = gravitationNbhd;\n  }\n}\n","'use strict';\n\nimport PredatorsController from './predators_controller';\nimport PreysController from './preys_controller';\nimport Field from './field';\n\nexport default class Zoo {\n  constructor(\n    predatorsParams,\n    rabbitsParams,\n    preysParams,\n    predatorFieldParams,\n    preyFieldParams,\n    panoramaSize\n  ) {\n    this.panoramaSize = panoramaSize;\n    this.foxesController = new PredatorsController(\n      predatorsParams,\n      panoramaSize\n    );\n    this.rabbitsController = new PredatorsController(\n      rabbitsParams,\n      panoramaSize\n    );\n    this.preysController = new PreysController(preysParams, panoramaSize);\n    this.foxesField = new Field(predatorFieldParams, panoramaSize, -1);\n    this.rabbitsField = new Field(predatorFieldParams, panoramaSize, -1);\n    this.preysField = new Field(preyFieldParams, panoramaSize, 1);\n  }\n\n  updateOrganisms({ predatorsParams, preysParams }) {\n    this.foxesController.updatePredatorsParams(predatorsParams);\n    this.rabbitsController.updatePredatorsParams(predatorsParams);\n    this.preysController.updatePreysParams(preysParams);\n  }\n\n  updatePreysField(preyFieldParams) {\n    this.preysField.updateFieldParams(preyFieldParams);\n  }\n\n  tick() {\n    this.feed();\n    this.starve();\n    this.calculateFields();\n    this.moveOrganisms();\n    this.reproduce();\n  }\n\n  moveOrganisms() {\n    this.movePredators();\n    this.movePrey();\n  }\n\n  movePredators() {\n    this.foxesController.moveOrganisms(this.panoramaSize, this.preysField);\n    this.rabbitsController.moveOrganisms(this.panoramaSize, this.preysField);\n  }\n\n  movePrey() {\n    // this.preysController.moveOrganisms(this.panoramaSize, this.foxesField);\n  }\n\n  calculateFields() {\n    this.calculatePredatorsField();\n    this.calculatePreysField();\n  }\n\n  calculatePredatorsField() {\n    this.foxesField.calculateField(this.foxesController);\n    this.rabbitsField.calculateField(this.rabbitsController);\n  }\n\n  calculatePreysField() {\n    this.preysField.calculateField(this.preysController);\n  }\n\n  // construct a hash of preys' locations on the field grid, with\n  // coords pointing to the top prey on a given tile (O(preys) time)\n  // Then, each predator can check the hash at its own location to\n  // find food (O(predators) time). Total: O(predators + preys)\n  feed() {\n    const preysLocations = this.calculatePreysLocations();\n    const foxesEaten = this.foxesController.feed(\n      preysLocations,\n      this.preysField.fieldNetSize\n    );\n    const rabbitsEaten = this.rabbitsController.feed(\n      preysLocations,\n      this.preysField.fieldNetSize\n    );\n    const eaten = [...foxesEaten, ...rabbitsEaten];\n    this.preysController.killOrganisms(eaten);\n  }\n\n  calculatePreysLocations() {\n    return this.preysController.revealLocations(this.preysField.fieldNetSize);\n  }\n\n  starve() {\n    this.foxesController.starvePredators();\n    this.rabbitsController.starvePredators();\n    this.preysController.starvePreys();\n  }\n\n  reproduce() {\n    if (!this.unpauseTimestamp) {\n      this.foxesController.reproducePredators(this.panoramaSize);\n      this.rabbitsController.reproducePredators(this.panoramaSize);\n      this.preysController.reproducePreys(this.panoramaSize);\n    } else if (Date.now() > this.unpauseTimestamp) {\n      delete this.unpauseTimestamp;\n    }\n  }\n\n  unpause(pauseTimestamp) {\n    this.unpauseTimestamp = 2 * Date.now() - pauseTimestamp;\n    this.foxesController.unpause(pauseTimestamp);\n    this.rabbitsController.unpause(pauseTimestamp);\n  }\n}\n","import { fitToAxis } from '../util/util';\n\nexport default class Graph {\n  constructor(graphCanvas, simulationParams) {\n    this.graphCanvas = graphCanvas;\n    this.canvasSize = {\n      x: graphCanvas.width,\n      y: graphCanvas.height\n    };\n    this.ctx = graphCanvas.getContext('2d');\n    this.carryingCapacity = 100;\n    this.lastCoords = [\n      {\n        foxesCount: simulationParams.predatorCount,\n        rabbitsCount: simulationParams.rabbitCount\n      }\n    ];\n    this.lastDraw = Date.now();\n    this.foxColor = simulationParams.predatorColor;\n    this.rabbitColor = simulationParams.rabbitColor;\n  }\n\n  draw(zoo) {\n    if (Date.now() - this.lastDraw > 1000) {\n      this.updateDatapoints(zoo);\n      this.ctx.clearRect(0, 0, this.canvasSize.x, this.canvasSize.y);\n      this.drawData();\n      this.drawAxes();\n      this.lastDraw = Date.now();\n    }\n  }\n\n  updateDatapoints(zoo) {\n    const foxesCount = zoo.foxesController.organisms.length;\n    const rabbitsCount = zoo.rabbitsController.organisms.length;\n    this.lastCoords.push({\n      foxesCount,\n      rabbitsCount\n    });\n    if (this.lastCoords.length > 100) {\n      this.lastCoords = this.lastCoords.slice(1);\n    }\n  }\n\n  drawData() {\n    this.drawFoxData();\n    this.drawRabbitData();\n  }\n\n  drawFoxData() {\n    const xIncrement = Math.floor(this.canvasSize.x / 100);\n    let xCoord = 0;\n    this.ctx.strokeStyle = this.foxColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(\n      xCoord,\n      this.canvasSize.y -\n        fitToAxis(\n          this.lastCoords[0].foxesCount,\n          this.carryingCapacity,\n          this.canvasSize.y\n        )\n    );\n    xCoord += xIncrement;\n    this.lastCoords.slice(1).forEach((coord, idx) => {\n      this.ctx.lineTo(\n        xCoord,\n        this.canvasSize.y -\n          fitToAxis(coord.foxesCount, this.carryingCapacity, this.canvasSize.y)\n      );\n      this.ctx.stroke();\n      xCoord += xIncrement;\n    });\n  }\n\n  drawRabbitData() {\n    const xIncrement = Math.floor(this.canvasSize.x / 100);\n    let xCoord = 0;\n    this.ctx.strokeStyle = this.rabbitColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(\n      xCoord,\n      this.canvasSize.y -\n        fitToAxis(\n          this.lastCoords[0].rabbitsCount,\n          this.carryingCapacity,\n          this.canvasSize.y\n        )\n    );\n    // debugger;\n    xCoord += xIncrement;\n    this.lastCoords.slice(1).forEach((coord, idx) => {\n      this.ctx.lineTo(\n        xCoord,\n        this.canvasSize.y -\n          fitToAxis(\n            coord.rabbitsCount,\n            this.carryingCapacity,\n            this.canvasSize.y\n          )\n      );\n      this.ctx.stroke();\n      xCoord += xIncrement;\n    });\n  }\n\n  drawAxes() {\n    this.ctx.strokeStyle = '#ffffff';\n    this.ctx.lineWidth = 2;\n\n    // x-axis\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, this.canvasSize.y - 1);\n    this.ctx.lineTo(this.canvasSize.x, this.canvasSize.y - 1);\n    this.ctx.stroke();\n\n    // y-axis\n    this.ctx.beginPath();\n    this.ctx.moveTo(1, 0);\n    this.ctx.lineTo(1, this.canvasSize.y);\n    this.ctx.stroke();\n  }\n\n  updateOrganisms({ carryingCapacity }) {\n    this.carryingCapacity = carryingCapacity;\n  }\n}\n","'use strict';\n\nimport Panorama from './panorama';\nimport Zoo from './zoo';\nimport Graph from './graph';\n\nexport default class Simulation {\n  constructor(canvas, graphCanvas, simulationParams) {\n    this.simulationParams = simulationParams;\n    this.canvas = canvas;\n    this.graphCanvas = graphCanvas;\n    this.graph = new Graph(graphCanvas, simulationParams);\n    this.panorama = new Panorama(this.canvas);\n    this.zoo = new Zoo(\n      this.simulationParams.predatorsParams(),\n      this.simulationParams.rabbitsParams(),\n      this.simulationParams.preysParams(),\n      this.simulationParams.predatorFieldParams(),\n      this.simulationParams.preyFieldParams(),\n      this.panorama.panoramaSize\n    );\n    this.animationInterval = 1000 / 24; // i.e. 24 fps throttle\n  }\n\n  tick(timestamp) {\n    this.ticker = window.requestAnimationFrame(this.tick.bind(this));\n\n    const now = Date.now();\n    const elapsed = now - this.nextRender;\n\n    if (elapsed > this.animationInterval) {\n      this.nextRender = now;\n\n      this.panorama.updateDx();\n      this.zoo.tick();\n      this.panorama.draw(this.zoo);\n      this.graph.draw(this.zoo);\n    }\n  }\n\n  begin() {\n    this.nextRender = Date.now();\n    this.tick();\n  }\n\n  togglePlaying(bool) {\n    if (bool) {\n      this.pauseTimestamp = this.pauseTimestamp || Date.now();\n      this.zoo.unpause(this.pauseTimestamp);\n      delete this.pauseTimestamp;\n      this.begin();\n    } else {\n      this.pauseTimestamp = Date.now();\n      window.cancelAnimationFrame(this.ticker);\n    }\n  }\n\n  // updateOrganisms(newParams) {\n  //   this.zoo.updateOrganisms(newParams);\n  //   this.graph.updateOrganisms(newParams.preysParams);\n  // }\n\n  // updatePreysField(newParams) {\n  //   this.zoo.updatePreysField(newParams);\n  // }\n\n  restart() {\n    // window.cancelAnimationFrame(this.ticker);\n    // this.graph = new Graph(this.graphCanvas, this.simulationParams);\n    // this.panorama = new Panorama(this.canvas);\n    // this.zoo = new Zoo(\n    //   this.simulationParams.predatorsParams(),\n    //   this.simulationParams.preysParams(),\n    //   this.simulationParams.predatorFieldParams(),\n    //   this.simulationParams.preyFieldParams(),\n    //   this.panorama.panoramaSize\n    // );\n    // this.begin();\n  }\n}\n","'use strict';\n// This file manages interaction with the HTML document\n// and integrates the top-level systems of the simulation.\n\n// `SimulationParams` acts as a single source of truth for all parameters\n\n// `Sliders` controls the slider components on the webpage, allowing\n// users to change the simulation parameters as desired. Data flows from\n// `Sliders` to `SimulationParams`\n\n// `Simulation` runs the ecosystem model: it tracks the 'animals' and their\n// interactions, and measures population levels\n\nimport SimulationParams from './simulation_params';\nimport Sliders from './sliders';\nimport Simulation from './simulation';\n\nconst handleVisibilityChange = (simulation) => {\n  if (document.hidden) {\n    simulation.togglePlaying(false);\n  } else {\n    simulation.togglePlaying(true);\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', function (event) {\n  const canvas = document.getElementById('canvas');\n  const graph = document.getElementById('graph');\n\n  const simulationParams = new SimulationParams();\n  const simulation = new Simulation(canvas, graph, simulationParams);\n  // const sliders = new Sliders(simulation, simulationParams);\n\n  simulation.begin();\n\n  document.addEventListener('visibilitychange', () =>\n    handleVisibilityChange(simulation)\n  );\n});\n"],"sourceRoot":""}